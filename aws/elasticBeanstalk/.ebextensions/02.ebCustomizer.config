###################################################################################################
#### This config file is used to customize Elastic Beanstalk settings and configuration.
####
#### 1. Set Health HTTP Codes
#### 2. Set CloudWatch Settings
#### 3. Customize log conf file for CloudWatch
#### 
#### 
###################################################################################################

option_settings:
    
  aws:elasticbeanstalk:customoption:
    CUSTOM_TIMEZONE_FILE: '/tmp/healthchecker/configureTimezone.sh'
    Region: '`{ "Ref" : "AWS::Region" }`'
    AccountId: '`{ "Ref" : "AWS::AccountId" }`'
    IMDS_TOKEN_EXPIRE_TIME: '7200' #in secs [2 Hours]
    IMDS_TOKEN_VALUE: '/tmp/healthchecker/imdsToken'

  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: 'none'

  aws:elasticbeanstalk:environment:
    EnvironmentType: 'SingleInstance'

  aws:autoscaling:launchconfiguration:
    InstanceType: 't2.micro'
    EC2KeyName: 'Key'

  # aws:elasticbeanstalk:environment:process:default:
  #   MatcherHTTPCode: '200,301,302'

  # Enable CloudWatch Logging Stream, EB itself will create Log Groups and Log Streams
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: 'true'
    DeleteOnTerminate: 'false'
    RetentionInDays: '180'    # In days - 6 months

  # Enable Log Rotation to s3, bucket used in this case will be the same bucket used for application deployment while creating application
  aws:elasticbeanstalk:hostmanager:
    LogPublicationControl: 'true'

files:
  "/opt/aws/amazon-cloudwatch-agent/bin/config.json": 
    mode: "000600"
    owner: root
    group: root
    content: |

      {
        "agent": {
          "metrics_collection_interval": 60,
          "run_as_user": "root"
        },
        "metrics": {
          "namespace": "System/Linux",
          "append_dimensions": {
            "AutoScalingGroupName": "${aws:AutoScalingGroupName}"
          },
          "metrics_collected": {
            "mem": {
              "measurement": [
                "mem_used_percent"
              ]
            }
          }
        },
        "collect_list": [ 
          {
            "file_path": "/var/log/eb-docker/containers/eb-current-app/app-*.log*",
            "log_stream_name": "${instance_id}"
          },
          {
            "file_path": "/var/log/eb-docker/containers/eb-current-app/error-*.log*",
             "log_stream_name": "${instance_id}"
          }
        ]
      }

  '`{"Fn::GetOptionSetting": {"OptionName": "CUSTOM_TIMEZONE_FILE"}}`':
    mode: "000755"
    owner: root
    group: root
    content : |
      #!/bin/bash

      CUSTOM_TIMEZONE=$(/opt/elasticbeanstalk/bin/get-config environment -k CUSTOM_TIMEZONE)

      echo && echo "System Default timezone is being updated..."

      if [ ! -f /usr/share/zoneinfo/$CUSTOM_TIMEZONE ] 
      then
        echo "$CUSTOM_TIMEZONE does not exist in the system, custom timezone can not be set, using Default."
      else
        echo 'ZONE="'$CUSTOM_TIMEZONE'"' > /etc/sysconfig/clock
        echo 'UTC=true' >> /etc/sysconfig/clock

        ln -f -s /usr/share/zoneinfo/$CUSTOM_TIMEZONE /etc/localtime

        ntpdate -u pool.ntp.org

        echo "System timezone is updated with timezone: $CUSTOM_TIMEZONE successfully." && echo
      fi

commands: 
  03-restartAwsCloudWatchLogsService:
    command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

  # 04-setCustomTimezone:
  #   command: |
  #     echo "Command for updating system timezone initiated..."
  #     '`{"Fn::GetOptionSetting": {"OptionName": "CUSTOM_TIMEZONE_FILE"}}`'

  05-IMDSSetup:
    command: |

      echo && echo "Generate IMDSv2 TOKEN and save in the file for uses in other script files..."
      IMDS_TOKEN_EXPIRE_TIME=`{"Fn::GetOptionSetting": {"OptionName": "IMDS_TOKEN_EXPIRE_TIME"}}`
      echo "Token Expiration time set to: ${IMDS_TOKEN_EXPIRE_TIME}"
      curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds:${IMDS_TOKEN_EXPIRE_TIME}" > `{"Fn::GetOptionSetting": {"OptionName": "IMDS_TOKEN_VALUE"}}`
      
      echo && echo "Token Value: "
      cat `{"Fn::GetOptionSetting": {"OptionName": "IMDS_TOKEN_VALUE"}}`

 